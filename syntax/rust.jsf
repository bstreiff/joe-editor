# JOE syntax highlight file for Rust

=Idle
=Ident
=Comment
=Constant
=Number		+Constant
=Boolean	+Constant
=String		+Constant
=StringEscape	+Escape
=Character	+Constant
=CharacterEscape +Escape

=Keyword
=Operator	+Keyword
=Statement	+Keyword
=Conditional	+Statement
=Loop		+Statement
=StorageClass	+Type +Keyword
=Structure	+Statement

=Bad
=Brace

:pre_idle Idle
	*		NULL		noeat call=.rust()

.subr rust

# #! allowed on first line

# TODO: Check for strings like r"\", etc -- need to read the spec.

:idle Idle
	*		idle
	"{}"		brace		recolor=-1
	"0"		zero		recolor=-1
	"1-9"		decimal		recolor=-1
	"."		decimal_point	recolor=-1
	"\""		string		recolor=-1
	"'"		char		recolor=-1
	"/"		slash		recolor=-1
	"\i"		ident		buffer
	"b"		maybe_byte_string	buffer
	"r"		maybe_raw_string	buffer

:maybe_byte_string Idle
	*		ident		noeat
	"'"		char		recolor=-2
	"\""		string		recolor=-2
	"r"		maybe_byte_raw_string

:maybe_raw_string Idle
	*		ident		noeat
	"#"		should_be_raw_string	recolor=-2

:maybe_byte_raw_string Idle
	*		ident		noeat
	"#"		should_be_raw_string	recolor=-3

:slash Idle
	*		idle		noeat
	"*"		comment		recolor=-2
	"/"		line_comment	recolor=-2

:brace Brace
	*		idle		noeat

:comment Comment
	*		comment
	"BFHNTX"	comment		noeat call=comment_todo.comment_todo()
	"*"		maybe_end_comment

:maybe_end_comment Comment
	*		comment
	"/"		idle
	"*"		maybe_end_comment

:line_comment Comment
	*		line_comment
	"BFHNTX"	line_comment	noeat call=comment_todo.comment_todo()
	"\n"		idle

# Numbers

:bad_number Bad
	*		idle	noeat
	"0-9"		bad_number

:zero Number
	*		idle	noeat
	"b"		binary
	"o"		octal
	"x"		hex
	"."		float
	"eE"		epart
	"0-9"		decimal	recolor=-1
	"ui"		int_suffix
	"f"		float_suffix

:decimal_point Number
	*		idle	noeat	recolor=-2
	"0-9"		float

:octal Number
	*		idle	noeat
	"0-7_"		octal
	"89"		bad_number	recolor=-1
	"ui"		int_suffix

:binary Number
	*		idle	noeat
	"01_"		binary
	"2-9"		bad_number	recolor=-1
	"ui"		int_suffix

:hex Number
	*		idle	noeat
	"0-9A-Fa-f_"	hex
	"ui"		int_suffix

:decimal Number
	*		idle	noeat
	"0-9_"		decimal
	"eE"		epart
	"."		float
	"ui"		int_suffix
	"f"		float_suffix

:float Number
	*		idle	noeat
	"eE"		epart
	"0-9_"		float
	"ui"		int_suffix
	"f"		float_suffix

:epart Number
	*		idle	noeat
	"0-9+\-"	enum

:enum Number
	*		idle	noeat
	"0-9_"		enum
	"ui"		int_suffix
	"f"		float_suffix

:float_suffix Number
	*		bad_number	noeat	recolor=-1
	"3"		float_suffix_1
	"6"		float_suffix_2

:float_suffix_1 Number
	*		bad_number	noeat	recolor=-1
	"2"		idle

:float_suffix_2 Number
	*		bad_number	noeat	recolor=-1
	"4"		idle

:int_suffix Number
	*		bad_number	noeat	recolor=-1
	"3"		int_suffix_1
	"6"		int_suffix_2
	"s"		int_suffix_3

:int_suffix_1 Number
	*		bad_number	noeat	recolor=-1
	"2"		idle

:int_suffix_2 Number
	*		bad_number	noeat	recolor=-1
	"4"		idle

:int_suffix_3 Number
	*		bad_number	noeat	recolor=-2
	"i"		int_suffix_4

:int_suffix_4 Number
	*		bad_number	noeat	recolor=-3
	"z"		int_suffix_5

:int_suffix_5 Number
	*		bad_number	noeat	recolor=-4
	"e"		idle

# strings like #"hello"#

:should_be_raw_string String
	*		idle	noeat
	"\""		raw_string

:raw_string String
	*		raw_string
	"\""		raw_string_maybe_done

:raw_string_maybe_done String
	*		raw_string	noeat
	"#"		idle

# strings like "hello"

:string	String
	*		string
	"\""		idle
	"\\"		string_escape	recolor=-1

:string_escape StringEscape
	*		string
	"x"		string_hex2
	"u"		string_maybe_uni

:string_maybe_uni StringEscape
	*		string		noeat
	"{"		string_uni

:string_uni StringEscape
	*		string_uni
	"}"		string

:string_hex2 StringEscape
	*		string		noeat
	"0-9a-fA-F"	string_hex1

:string_hex1 StringEscape
	*		string		noeat
	"0-9a-fA-F"	string

# character constants like 'h'

:char	Character
	*		char_done
	"\\"		char_escape	recolor=-1

:char_done Character
	*		idle		noeat recolor=-3
	"\'"		idle

:char_escape CharacterEscape
	*		char_done	noeat
	"x"		char_hex2
	"u"		char_maybe_uni

:char_maybe_uni CharacterEscape
	*		char_done	noeat
	"{"		char_uni

:char_uni CharacterEscape
	*		char_uni
	"}"		char_done

:char_hex2 CharacterEscape
	*		char_done	noeat
	"0-9a-fA-F"	char_hex1

:char_hex1 CharacterEscape
	*		char_done	noeat
	"0-9a-fA-F"	char

# Identifiers

:ident Ident
	*		idle	noeat strings
	"abstract"	storage
	"alignof"	kw
	"as"		operator
	"become"	kw
	"box"		kw
	"break"		loop
	"const"		storage
	"continue"	loop
	"crate"		kw
	"do"		loop
	"else"		cond
	"enum"		struct
	"extern"	storage
	"false"		bool
	"final"		storage
	"fn"		struct
	"for"		loop
	"if"		cond
	"impl"		kw
	"in"		operator
	"let"		kw
	"loop"		loop
	"macro"		kw
	"match"		kw
	"mod"		kw # operator?
	"move"		kw
	"mut"		kw
	"offsetof"	kw
	"override"	storage
	"priv"		storage
	"proc"		kw
	"pub"		storage
	"pure"		storage
	"ref"		kw
	"return"	stmt
	"Self"		kw
	"self"		kw
	"sizeof"	kw # operator?
	"static"	storage
	"struct"	struct
	"super"		kw
	"trait"		kw
	"true"		bool
	"type"		kw
	"typeof"	kw # operator?
	"unsafe"	storage
	"unsized"	kw # storage?
	"use"		kw
	"virtual"	storage
	"where"		kw
	"while"		loop
	"yield"		stmt
done
	"\c"	ident

:kw Keyword
	*		idle		noeat

:lit Constant
	*		idle		noeat

:bool Boolean
	*		idle		noeat

:operator Operator
	*		idle		noeat

:storage StorageClass
	*		idle		noeat

:cond Conditional
	*		idle		noeat

:loop Loop
	*		idle		noeat

:struct Structure
	*		idle		noeat

.end
